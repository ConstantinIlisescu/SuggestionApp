@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if(categoriesCreated)
{
    <h4>Categories have been created</h4>
}else{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}


@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}




@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Coste",
                LastName = "Ilisescu",
                EmailAddress = "cos@cos.com",
                DisplayName = "Sample Coste",
                ObjectIdentifier = "abc-123"
            };

        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");



        SuggestionModel suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[0],
            Suggestion = "Our First Suggestion",
            Description = "This is a sample sugestion generated by the method"
        };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Our Second Suggestion",
                Description = "This is a sample sugestion generated by the method",
                SuggestionStatus = statuses[0]
            };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Our Third Suggestion",
                Description = "This is a sample sugestion generated by the method",
                SuggestionStatus = statuses[1]
            };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Our Fourth Suggestion",
                Description = "This is a sample sugestion generated by the method",
                SuggestionStatus = statuses[2]
            };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Our Fifth Suggestion",
                Description = "This is a sample sugestion generated by the method",
                SuggestionStatus = statuses[3]
            };

        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if(categories?.Count >0)
        {
            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Full paid courses."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advice on being a developer."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In-Depth Tutorials",
                CategoryDescription = "A deep-dive video on how to use a topic."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10-Minutes Training.",
                CategoryDescription = "A quick \"How do I use this?\" video."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure what categori this fits in."
            };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if(statuses?.Count >0)
        {
            return;
        }

        StatusModel stat = new()
        {
            StatusName = "Completed",
            StatusDescription = "The suggestion was accepted and the corresponding item was created."
        };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion is interesting. we are watching to see how much interes it attracts."
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and it will be released soon."
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The suggestion was not something that we are going to undertake."
            };

        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}
